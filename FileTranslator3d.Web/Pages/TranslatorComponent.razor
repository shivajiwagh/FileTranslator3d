@using System.IO
@using System.Security.Permissions
@using FileTranslator3d.Models
@using FileTranslator3d.Web.Services
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@inject IJSRuntime JsRuntime

<div class="drag-drop-zone">
    <InputFile OnChange="OnSelectFile" />
    @_selectedFileString
</div>

@*<div class="row">
        <div class="col-md-12">
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"> uploading @fileName </div>
            </div>
        </div>
    </div>*@



@if (_fileName != null)
{
    <div class="row">
        <div class="col-12 card card-body">
            @*<h5 class="card-title">@fileName</h5>*@
            <form>
                <div class="form-row">
                    <div class="col-md-2">
                        <label>Scale</label>
                        <input type="number" @bind="_scale" class="form-control" required>
                    </div>
                    <div class="col-md-2">
                        <label>Rotate</label>
                        <input type="number" @bind="_rotation" class="form-control" required>
                        <select class="custom-select" @bind="_rotationAxis" aria-label="Default select example">
                            <option selected>x</option>
                            <option value="1">x</option>
                            <option value="2">y</option>
                            <option value="3">z</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label>Transform</label>
                        <div class="input-group">
                            <div class="input-group-prepend" style="margin-left: 1rem">
                                <span class="input-group-text"> X :</span>
                            </div>
                            <input type="number" @bind="_originX" class="form-control" required>
                            <div class="input-group-prepend" style="margin-left: 1rem">
                                <span class="input-group-text"> Y :</span>
                            </div>
                            <input type="number" @bind="_originY" class="form-control" required>
                            <div class="input-group-prepend" style="margin-left: 1rem">
                                <span class="input-group-text"> Z :</span>
                            </div>
                            <input type="number" @bind="_originZ" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-md-2" style="padding-top: 2rem">
                        <select class="custom-select" @bind="_outputFileType" aria-label="Default select example">
                            <option selected>stl</option>
                            <option value="1">iges</option>
                            <option value="2">step</option>
                            <option value="3">stl</option>
                        </select>
                    </div>
                    <div class="col-md-2" style="padding-top: 2rem">
                        <button class="btn btn-primary" type="button" @onclick="OnStartTranslate">
                            @if (_translateStartStatus == true)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            }
                            @_translateButtonText
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
}

@if (_status == true)
{
    <div class="alert alert-success" role="alert">
        <h4 class="alert-heading">File translation complete!</h4>
        <p class="lead">file @_fileName is translated to @_targetFileName</p>
        <p class="lead">Area : @_surfaceArea</p>
        <p class="lead">Volume : @_surfaceVolume</p>
        <hr>
        <a class="btn btn-primary btn-lg" href="@_downloadFileUrl" role="button">Download file</a>
    </div>

    <div class="row" style="padding-top: 1rem">
        <div class="col-6 card card-body">
            <label>Point inside or outside ? </label>
            <div class="input-group">
                <div class="input-group-prepend" style="margin-left: 1rem">
                    <span class="input-group-text"> X :</span>
                </div>
                <input type="number" @bind="_pointX" class="form-control" required>
                <div class="input-group-prepend" style="margin-left: 1rem">
                    <span class="input-group-text"> Y :</span>
                </div>
                <input type="number" @bind="_pointY" class="form-control" required>
                <div class="input-group-prepend" style="margin-left: 1rem">
                    <span class="input-group-text"> Z :</span>
                </div>
                <input type="number" @bind="_pointZ" class="form-control" required>
                <button class="btn btn-primary" type="button" @onclick="OnCheckPoint" style="margin-left: 5rem">
                    @if (_pointCheckStatus == true)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    @_pointStatusString
                </button>
            </div>
        </div>

        @if (_pointCheckStatus)
        {
            <div class="col-6">
                <div class="alert alert-success" role="alert">
                    <p class="lead">Point is @_pointStatusString</p>
                </div>
            </div>
        }
    </div>
}

@code {
    [Inject]
    public ITranslatorApiService TranslatorApiService { get; set; }

    const string DefaultFilename = "Drop a text file here to view it, or click to choose a file";
    const int MaxFileSize = 5 * 1024 * 1024; // 5MB
    bool _status = false;

    string _fileName;
    string _fileFullName;
    string _targetFileName;
    string _targetFullFileName;
    double _surfaceArea;
    double _surfaceVolume;
    bool _pointCheckStatus;
    string _pointStatusString = "Submit";
    IFileListEntry _selectedFile;
    string _selectedFileString = DefaultFilename;
    string _translateButtonText = "Translate";
    bool _translateStartStatus = false;
    string _downloadFileUrl = "";
    string _rotationAxis = "x";
    bool _fileUploadSuccess = false;

    float _originX = 0;
    float _originY = 0;
    float _originZ = 0;
    float _pointX = 0;
    float _pointY = 0;
    float _pointZ = 0;
    float _scale = 1;
    float _rotation = 0;
    string _outputFileType = "stl";

    async void OnStartTranslate()
    {
        _status = false;
        _translateStartStatus = true;
        _translateButtonText = "Converting to " + _outputFileType;

        if (_fileUploadSuccess == false)
        {
            var ms = new MemoryStream();
            await _selectedFile.Data.CopyToAsync(ms);

            var content = new MultipartFormDataContent {
                { new ByteArrayContent(ms.GetBuffer()), "\"upload\"", _selectedFile.Name }
            };

            var response = await TranslatorApiService.UploadFile(content);
            if (response.IsSuccessStatusCode)
            {
                _fileUploadSuccess = true;
                var json = await response.Content.ReadAsStringAsync();
                var argsOptions = JsonConvert.DeserializeObject<FileArgumentOptions>(json);
                _fileFullName = argsOptions.InputFileName;
                await RunTranslation(argsOptions.InputFileName);
            }
        }
        else
        {
            await RunTranslation(_fileFullName);
        }
    }

    private async Task RunTranslation(string filename)
    {
        var translateResult = await TranslatorApiService.TranslateFile(new TransformationModel()
        {
            Scale = _scale,
            Rotation = _rotation,
            OriginX = _originX,
            OriginY = _originY,
            OriginZ = _originZ,
            OutPutFileType = _outputFileType,
            InputFilePath = filename,
            RotationAxis = _rotationAxis
        });
        if (translateResult.Status)
        {
            _translateButtonText = "Translate";
            _translateStartStatus = false;
            _targetFullFileName = translateResult.OutPutFileName;
            _targetFileName = Path.GetFileName(translateResult.OutPutFileName);
            _surfaceArea = translateResult.Area;
            _surfaceVolume = translateResult.Volume;
            _status = true;
            _downloadFileUrl = TranslatorApiService.GetDownloadUrl(_targetFullFileName);
            StateHasChanged();
        }
    }

    private void OnCheckPoint()
    {
        _pointCheckStatus = true;
        _pointStatusString = "Outside";
    }

    /// <summary>
    /// Ref: https://www.mikesdotnetting.com/article/341/uploading-files-in-blazor
    /// </summary>
    /// <param name="files"></param>
    /// <returns></returns>
    private void OnSelectFile(IFileListEntry[] files)
    {
        _selectedFileString = "Loading...";
        _selectedFile = files.FirstOrDefault();
        if (_selectedFile != null)
        {
            _fileName = _selectedFile.Name;
            _selectedFileString = _fileName;
            _status = false;
        }
    }
}
